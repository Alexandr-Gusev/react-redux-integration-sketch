Перед тем как начать вам должны быть знакомы:

- инструкция import https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/import
- стрелочные функции https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions
- деструктурирующее присваивание https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
- spread оператор https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Spread_syntax
- общее понимание react, например, https://ru.reactjs.org/docs/hello-world.html
- общее понимание redux, например, https://github.com/rajdee/redux-in-russian/tree/master/docs/basics

Организация кода:

- для каждого компонента (кроме служебных) создаем папку и называем ВотТак
- внутри этой папки
-- служебные компоненты называем ВотТак
-- в файл index.js собираем все экспортируемые сущности - договоримся, что мы будем экспортировать сущности из папки только через этот файл
-- в файл ducks.js собираем все action types, все action creators, defaultState, reducer - договоримся, что эти сущности могут быть только в этом файле
-- при необходимости создаем вложенные папки аналогичного наименования и содержания
- отдаем предпочтение функциональным компонентам-представлениям
- если кажется что компоненту нужно состояние - не спешим использовать классовые компоненты, в начале пробуем использовать хуки https://ru.reactjs.org/docs/hooks-intro.html
- если компонент-представление не используется без контейнера, то помещаем определение компонента прямо в вызов connect
- общие служебые сущности собираем в папку utils
- при определении переменных используем const или в крайнем случае let, не используем var
- не используем ; в конце строки
- внутри модуля все переменные (кроме компонентов) называем вотТак
- в ответах на запросы мы можем встретить переменные именованные внешними системами другим способом - оставляем их как есть
- в качестве отступа используем табуляцию
- не допускаем более двух идущих подряд открывающих или закрывающих круглых или фигурных скобок - в противном случае переносим код на следующую строку с соответствующим отступом
- отдаем предпочтение стрелочным функциям
- для стилизации используем классы прописываемые в className
- не используем классы и файлы стилей из legacy
- файлы стилей храним в react/css
- не забываем импортировать нужные файлы стилей в начале модуля
- классы стилей называем вот-так
- картинки храним в static/img
- при именовании картинок отдаем предпочтение вот-таким-именам
- картинки из legacy можно использовать без изменений если они нам подходят

Сборка и отладка:
- debug сборка - запускаем npm run bd в папке react (для ускорения включена поддержка только последней версии Chrome)
- release сборка - запускаем npm run bp в папке react
- копируем содержимое папки react/dist в папку static на ноде
- при отладке react-модули можно найти на вкладке Sources в ветке top/webpack:///./src
- точки останова и просмотр значений так же доступны (увы, в последней версии Chrome что-то сломали и значение не показывается при наведении на переменную, но его можно посмотреть через консоль)
