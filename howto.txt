Перед тем как начать вам должны быть знакомы:

- инструкция import https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/import
- инструкция export https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/export
- стрелочные функции https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions
- деструктурирующее присваивание https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
- spread оператор https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Spread_syntax
- общее понимание react, например, https://ru.reactjs.org/docs/hello-world.html
- общее понимание redux, например, https://rajdee.gitbooks.io/redux-in-russian/content/docs/introduction/ThreePrinciples.html

Интеграция с legacy:

- до тех пор пока мы полностью не перейдем на react наше react-приложение не будет иметь корневого компонента и автоматически генерируемого HTML
- вместо этого мы в legacy HTML добавим ссылки на файлы, генерируемые webpack и точки монтажа дочерних компонентов
- монтаж дочерних компонентов и взаимодействие с react-сущностами реализовано при помощи отправки событий (см. react/src/js/react-handlers.js)
- обратное взаимодействие реализовано аналогично (см. react/src/js/legacy-handlers.js) через отправку сообщений из async action creators (см., например, showNews в react/src/js/News/ducks.js)

Организация кода:

- каждую страницу интерфейса (или иную отображаемую сущность) реализуем в виде компонента
- для каждого компонента создаем в react/src/js файл или папку и называем ВотТак
- для каждой сущности, не являющейся компонентом, создаем в react/src/js файл или папку и называем вот-так
- общие сущности собираем в папку react/src/utils

- внутри папки содержащей сущность:
-- в файл index.js собираем все экспортируемые сущности (в виде инструкций export) - мы будем экспортировать сущности из папки только через этот файл
-- в файл ducks.js собираем все action types, все action creators, defaultState, reducer (возможно использование combineReducers) - договоримся, что эти сущности могут быть только в этом файле
-- при необходимости создаем иные файлы или папки аналогичного содержания (дочерние компоненты и служебные сущности)

- при проектировании компонентов:
-- отдаем предпочтение функциональным компонентам-представлениям
-- если кажется что компоненту нужно состояние - не спешим использовать классовые компоненты, вначале пробуем использовать хуки https://ru.reactjs.org/docs/hooks-intro.html
-- если компонент-представление не используется без контейнера, то помещаем определение компонента прямо в вызов connect

- общие положения:
-- внутри модуля все переменные и функции (кроме компонентов) называем вотТак
-- компоненты и классы называем ВотТак
-- служебные константы называем ВОТ_ТАК
-- в ответах на запросы мы можем встретить переменные именованные внешними системами другим способом - оставляем их как есть
-- при определении переменных используем const или let, не используем var
-- отдаем предпочтение стрелочным функциям
-- не допускаем более двух идущих подряд открывающих или закрывающих скобок (круглых или фигурных в любой комбинации) - в противном случае переносим код на следующую строку с соответствующим отступом
-- не используем ; в конце строки
-- в качестве отступа используем табуляцию
-- отдаем предпочтение двойным кавычкам

- стили:
-- темы храним в react/src/themes
-- для стилизации элементов используем классы, прописываемые в className
-- файлы и классы стилей называем вот-так
-- если файл стиля используется только одним компонентом, то называем его по имени компонента (ВотТак или КорневойКомпонент-ДочернийКомпонент)
-- если класс стиля используется только одним компонентом, то добавляем к нему префикс с именем компонента (ВотТак- или КорневойКомпонент-ДочернийКомпонент-)
-- классы стилей дочерних компонентов стараемся по возможности хранить в файле стилей их корневого компонента
-- файлы стилей храним в react/css
-- не используем классы и файлы стилей из legacy
-- не забываем импортировать нужные файлы стилей в начале модуля

- картинки:
-- картинки называем вот-так
-- если картинка используется только одним компонентом, то добавляем к ней префикс с именем компонента (ВотТак- или КорневойКомпонент-ДочернийКомпонент-)
-- картинки храним в static/img
-- картинки из legacy можно использовать без изменений, если они нам подходят

Сборка и отладка:

- debug сборка - запускаем npm run bd в папке react (для ускорения включена поддержка только последней версии Chrome)
- release сборка - запускаем npm run bp в папке react
- копируем содержимое папки react/dist в папку static на ноде
- при отладке react-модули можно найти на вкладке Sources в ветке top/webpack:///./src
- переход в исходный код из консоли, точки останова и просмотр значений так же доступны (к сожалению, в последней версии Chrome что-то сломали и значение не показывается при наведении на переменную, но его можно посмотреть через консоль)
